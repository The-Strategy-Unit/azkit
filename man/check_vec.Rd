% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/azkit_helpers.R
\name{check_vec}
\alias{check_vec}
\title{An alternative to stopifnot/assert_that etc}
\usage{
check_vec(
  x,
  predicate,
  message,
  which = c("every", "some", "none"),
  pf = parent.frame()
)
}
\arguments{
\item{x}{The object to be checked}

\item{predicate}{The predicate function used to check elements of \code{x}}

\item{message}{A custom error message, as a string. Will be shown to the
user if the predicate check does not succeed. Can include \code{glue} variables
and \code{{cli}} semantic markup. Variable values will be searched for in the
environment of the caller function (not in the environment of \code{check_vec()}
). This makes it easier to include informative values in the message.}

\item{which}{One of "every", "some", "none", as a string. Defines which
\code{{purrr}} function to use when applying the predicate. "every", the default,
means that \code{check_vec()} will succeed if every value of x satisfies the
predicate. "none" can be used to generate an inverse predicate, or the
situation where success means that none of the elements of x satisfies the
predicate. "some" is unlikely to be useful often, but it is available.}

\item{pf}{Set as \code{\link[=parent.frame]{parent.frame()}} so variables in the caller environment can
be used in the custom error message.}
}
\description{
This function makes it easy to use the \code{{purrr}} functions \code{every()},
\code{some()} and \code{none()} to handle vector inputs of length >= 1, and supports
the seamless use of \code{glue} strings in the custom error message.
Not suitable for checking if \code{length(x) == 1} as it will check vectors
element-wise, so will potentially return TRUE even if \code{length(x) > 1}
}
\seealso{
\code{\link[=check_scalar_type]{check_scalar_type()}}
}
\keyword{internal}
